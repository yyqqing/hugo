on:
  push:
    branches: [ master ]
  pull_request:
name: Test
env:
    GOPROXY: https://proxy.golang.org
    GO111MODULE: on
    SASS_VERSION: 1.63.2
    DART_SASS_SHA_LINUX: 3ea33c95ad5c35fda6e9a0956199eef38a398f496cfb8750e02479d7d1dd42af
    DART_SASS_SHA_MACOS: 11c70f259836b250b44a9cb57fed70e030f21f45069b467d371685855f1eb4f0
    DART_SASS_SHA_WINDOWS: cd8cd36a619dd8e27f93d3186c52d70eb7d69472aa6c85f5094b29693e773f64
permissions:
  contents: read
jobs:
  test:
    strategy:
      matrix:
        go-version: [1.19.x,1.20.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
    - name: Install Go
      uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true
        cache: true
        cache-dependency-path: |
          **/go.sum
          **/go.mod
    - name: Install Ruby
      uses: ruby/setup-ruby@ee2113536afb7f793eed4ce60e8d3b26db912da4
      with:
        ruby-version: '2.7' 
        bundler-cache: true #
    - name: Install Python
      uses: actions/setup-python@3105fb18c05ddd93efea5f9e0bef7a03a6e9e7df
      with:
        python-version: '3.x'
    - name: Install Mage
      run: go install github.com/magefile/mage@v1.15.0
    - name: Install asciidoctor
      uses: reitzig/actions-asciidoctor@7570212ae20b63653481675fb1ff62d1073632b0
    - name: Install docutils
      run: |
        pip install docutils
        rst2html.py --version
    - if: matrix.os == 'ubuntu-latest'
      name: Install pandoc on Linux
      run: |
          sudo apt-get update -y
          sudo apt-get install -y pandoc
    - if: matrix.os == 'macos-latest'
      run: |
        brew install pandoc
    - if: matrix.os == 'windows-latest'
      run: |
        Choco-Install -PackageName pandoc
    - run: pandoc -v
    - if: matrix.os == 'windows-latest'
      run: |
        Choco-Install -PackageName mingw -ArgumentList "--version","12.2.0","--allow-downgrade"
    - if: matrix.os == 'ubuntu-latest'
      name: Install dart-sass-embedded Linux
      run: |
        echo "Install Dart Sass version ${SASS_VERSION} ..."
        curl -LJO "https://github.com/sass/dart-sass/releases/download/${SASS_VERSION}/dart-sass-${SASS_VERSION}-linux-x64.tar.gz";
        echo "${DART_SASS_SHA_LINUX}  dart-sass-${SASS_VERSION}-linux-x64.tar.gz" | sha256sum -c;
        tar -xvf "dart-sass-${SASS_VERSION}-linux-x64.tar.gz";
        echo "$GOBIN"
        echo "$GITHUB_WORKSPACE/dart-sass/" >> $GITHUB_PATH
    - if: matrix.os == 'macos-latest'
      name: Install dart-sass-embedded MacOS
      run: |
        echo "Install Dart Sass version ${SASS_VERSION} ..."
        curl -LJO "https://github.com/sass/dart-sass/releases/download/${SASS_VERSION}/dart-sass-${SASS_VERSION}-macos-x64.tar.gz";
        echo "${DART_SASS_SHA_MACOS}  dart-sass-${SASS_VERSION}-macos-x64.tar.gz" | shasum -a 256 -c;
        tar -xvf "dart-sass-${SASS_VERSION}-macos-x64.tar.gz";
        echo "$GITHUB_WORKSPACE/dart-sass/" >> $GITHUB_PATH
    - if: matrix.os == 'windows-latest'
      name: Install dart-sass-embedded Windows
      run: |
        echo "Install Dart Sass version ${env:SASS_VERSION} ..."
        curl -LJO "https://github.com/sass/dart-sass/releases/download/${env:SASS_VERSION}/dart-sass-${env:SASS_VERSION}-windows-x64.zip";
        Expand-Archive -Path "dart-sass-${env:SASS_VERSION}-windows-x64.zip" -DestinationPath .;
        echo  "$env:GITHUB_WORKSPACE/dart-sass/" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf-8 -Append
    - if: matrix.os != 'windows-latest'
      name: Check
      run: |
        sass --version;
        mage -v check;
      env:
        HUGO_BUILD_TAGS: extended
    - if: matrix.os == 'windows-latest'
      # See issue #11052. We limit the build to regular test (no -race flag) on Windows for now.
      name: Test
      run: |
        mage -v test;
      env:
        HUGO_BUILD_TAGS: extended
    - name: Build tags
      run: |
        go install -tags extended,nodeploy
    - if: matrix.os == 'ubuntu-latest'
      name: Build for dragonfly
      run: |
        go install
      env:
        GOARCH: amd64
        GOOS: dragonfly
